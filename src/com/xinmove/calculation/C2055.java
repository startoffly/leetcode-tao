package com.xinmove.calculation;

import org.junit.Test;

import java.util.Arrays;

/**
 * 给你一个长桌子，桌子上盘子和蜡烛排成一列。给你一个下标从 0 开始的字符串 s ，它只包含字符 '*' 和 '|' ，其中 '*' 表示一个 盘子 ，'|' 表示一支 蜡烛 。
 * <p>
 * 同时给你一个下标从 0 开始的二维整数数组 queries ，其中 queries[i] = [lefti, righti] 表示 子字符串 s[lefti...righti] （包含左右端点的字符）。对于每个查询，你需要找到 子字符串中 在 两支蜡烛之间 的盘子的 数目 。如果一个盘子在 子字符串中 左边和右边 都 至少有一支蜡烛，那么这个盘子满足在 两支蜡烛之间 。
 * <p>
 * 比方说，s = "||**||**|*" ，查询 [3, 8] ，表示的是子字符串 "*||**|" 。子字符串中在两支蜡烛之间的盘子数目为 2 ，子字符串中右边两个盘子在它们左边和右边 都 至少有一支蜡烛。
 * 请你返回一个整数数组 answer ，其中 answer[i] 是第 i 个查询的答案。
 * <p>
 *  
 * <p>
 * 示例 1:
 * <p>
 * <p>
 * <p>
 * 输入：s = "**|**|***|", queries = [[2,5],[5,9]]
 * 输出：[2,3]
 * 解释：
 * - queries[0] 有两个盘子在蜡烛之间。
 * - queries[1] 有三个盘子在蜡烛之间。
 * 示例 2:
 * <p>
 * <p>
 * <p>
 * 输入：s = "***|**|*****|**||**|*", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]
 * 输出：[9,0,0,0,0]
 * 解释：
 * - queries[0] 有 9 个盘子在蜡烛之间。
 * - 另一个查询没有盘子在蜡烛之间。
 *  
 * <p>
 * 提示：
 * <p>
 * 3 <= s.length <= 105
 * s 只包含字符 '*' 和 '|' 。
 * 1 <= queries.length <= 105
 * queries[i].length == 2
 * 0 <= lefti <= righti < s.length
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/plates-between-candles
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @date 2022/3/8 10:10
 */
public class C2055 {

    @Test
    public void test() {
        String s;
        int[][] queries;
//        queries = new int[][]{{2, 5}, {5, 9}};
//        s = "**|**|***|";
//        System.out.println("输入：" + s + "，预期结果：[2,3] ，实际结果：" + Arrays.toString(platesBetweenCandles(s, queries)));
//
//
//        queries = new int[][]{{1, 17}, {4, 5}, {14, 17}, {5, 11}, {15, 16}};
//        s = "***|**|*****|**||**|*";
//        System.out.println("输入：" + s + "，预期结果：[9,0,0,0,0] ，实际结果：" + Arrays.toString(platesBetweenCandles(s, queries)));
//
//        queries = new int[][]{{1, 6}, {1, 11}, {4, 17}, {5, 17}, {15, 16}};
//        s = "***|******|***********|*";
//        System.out.println("输入：" + s + "，预期结果：[0, 6, 6, 0, 0] ，实际结果：" + Arrays.toString(platesBetweenCandles(s,
//                queries)));

//        queries = new int[][]{{2, 33}, {2, 32}, {3, 31}, {0, 33}, {1, 24}, {3, 20}, {7, 11}, {5, 32}, {2, 31}, {5, 31}, {0, 31}, {3, 28}, {4, 33}, {6, 29}, {2, 30}, {2, 28}, {1, 30}, {1, 33}, {4, 32}, {5, 30}, {4, 23}, {0, 30}, {3, 10}, {5, 28}, {0, 28}, {4, 28}, {3, 33}, {0, 27}};
//        s = "*|*||||**|||||||*||*||*||**|*|*||*";
//        System.out.println("输入：" + s + "，预期结果：[9,9,9,10,6,4,0,9,9,9,10,7,9,8,8,7,9,10,9,8,5,9,2,7,8,7,9,8] ，实际结果：" + Arrays.toString(platesBetweenCandles(s,
//                queries)));
        queries = new int[][]{{33,1967},{39,1964},{46,1990},{37,1991},{776,1018},{36,1975},{4,1971},{13,1954},{0,1983},{35,1991},{43,1978},{45,1956},{31,1978},{46,1991},{15,1951},{13,1979},{20,1972},{81,1309},{1620,1807},{25,1997},{35,1953},{845,1464},{20,1999},{29,1958},{37,1970},{679,1484},{27,1984},{6,1993},{49,1996},{23,1983},{604,1306},{17,1987},{155,317},{41,1981},{909,966},{38,1973},{43,1984},{27,1955},{1045,1662},{3,1950},{18,1961},{1231,1676},{32,1997},{822,1992},{27,1962},{27,1999},{6,1951},{26,1993},{23,1997},{136,675},{31,1975},{48,1976},{27,1979},{16,1966},{5,1995},{45,1970},{24,1978},{0,1971},{4,1987},{40,1994},{23,1982},{44,1999},{43,1951},{365,1470},{46,1975},{21,1998},{44,1959},{17,1989},{36,1993},{4,1952},{1132,1382},{44,1986},{10,1954},{21,1969},{3,1968},{8,1957},{30,1960},{39,1993},{27,1831},{278,1762},{16,1967},{34,1996},{18,1988},{597,1814},{7,1962},{46,1976},{758,1835},{15,1994},{15,1981},{36,1969},{33,1984},{15,1997},{18,1956},{0,1963},{3,1962},{28,1977},{7,1960},{513,711},{1773,1907},{1,1982},{9,1972},{79,757},{13,1984},{17,1984},{396,1578},{6,1953},{29,1974},{130,1408},{238,1386},{371,1495},{43,1950},{4,1967},{43,1986},{2,1963},{8,1991},{39,1994},{17,1996},{28,1987},{1108,1653},{12,1995},{40,1967},{1098,1780},{28,1965},{8,1978},{26,1974},{47,1992},{30,1991},{1027,1704},{9,1957},{45,1964},{37,1969},{31,1980},{118,305},{0,1979},{43,1994},{858,1980},{129,1900},{3,1981},{41,1997},{377,605},{35,1982},{10,1984},{381,800},{43,1977},{24,1968},{33,1971},{37,1981},{28,1998},{33,1981},{47,1990},{7,1998},{1600,1830},{23,1991},{1099,1386},{5,1999},{1064,1333},{33,1968},{16,1974},{31,1994},{361,1117},{15,1968},{26,1961},{22,1968},{36,1974},{30,1957},{24,1981},{20,1980},{1302,1435},{27,1980},{1142,1365},{422,857},{46,1997},{46,1964},{17,1982},{25,1987},{34,1966},{21,1987},{33,1952},{537,1345},{28,1995},{21,1972},{101,642},{19,1977},{37,1972},{42,1988},{19,1976},{29,1997},{2,1950},{22,1953},{448,1526},{28,1974},{16,1953},{45,1968},{34,1961},{15,1975},{25,1985},{25,1988},{18,1955},{46,1954},{11,1980},{7,1997},{23,1973},{14,1992},{21,1951},{34,1972},{1289,1888},{463,1696},{36,1979},{32,1956},{22,1999},{3,1986},{269,523},{22,1981},{26,1954},{48,1999},{46,1977},{389,1253},{65,1652},{10,1969},{13,1969},{44,1990},{5,1971},{3,1999},{819,1398},{14,1972},{42,1960},{45,1999},{26,1994},{12,1978},{698,1922},{25,1970},{16,1952},{5,1975},{328,387},{42,1989},{42,1980},{13,1974},{9,1999},{0,1997},{20,1985},{1715,1764},{17,1988},{17,1978},{37,1979},{1743,1823},{6,1956},{42,1983},{8,1994},{24,1980},{251,1590},{27,1989},{8,1953},{20,1979},{612,738},{17,1965},{1077,1194},{41,1979},{46,1988},{6,1980},{48,1990},{37,1985},{25,1996},{39,1951},{9,1979},{20,1970},{19,1980},{10,1998},{40,1961},{42,1952},{43,1989},{37,1996},{29,1990},{406,448},{16,1965},{40,1957},{43,1955},{26,1972},{43,1982},{459,1776},{44,1985},{18,1991},{10,1966},{218,1406},{569,1477},{25,1998},{11,1988},{35,1987},{25,1994},{19,1955},{45,1984},{465,897},{28,1999},{40,1982},{37,1964},{13,1995},{248,1388},{30,1976},{146,527},{18,1960},{15,1972},{48,1986},{13,1971},{0,1990},{6,1989},{0,1966},{12,1973},{1610,1688},{2,1996},{42,1951},{15,1992},{22,1993},{46,1966},{42,1997},{1,1952},{5,1985},{7,1968},{1726,1751},{3,1985},{35,1957},{5,1970},{76,1492},{29,1983},{15,1970},{0,1993},{608,1473},{10,1980},{24,1962},{33,1992},{78,1843},{3,1992},{33,1999},{72,1871},{49,1964},{0,1975},{30,1953},{48,1966},{19,1986},{26,1964},{40,1958},{38,1980},{568,674},{20,1981},{6,1950},{38,1959},{6,1973},{14,1957},{42,1999},{24,1967},{29,1951},{768,910},{49,1997},{26,1983},{1347,1812},{33,1985},{48,1960},{16,1996},{30,1963},{1019,1582},{1,1958},{12,1958},{46,1958},{46,1952},{35,1996},{23,1990},{48,1992},{26,1966},{1,1979},{26,1999},{0,1978},{39,1968},{7,1953},{15,1989},{14,1997},{42,1981},{43,1952},{22,1960},{47,1994},{0,1952},{29,1950},{47,1975},{1108,1825},{1025,1079},{35,1979},{39,1952},{30,1962},{767,1657},{3,1975},{17,1968},{48,1954},{4,1959},{39,1991},{30,1981},{743,1130},{15,1984},{5,1961},{40,1999},{46,1956},{31,1952},{40,1959},{32,1960},{17,1956},{48,1983},{275,1942},{7,1986},{20,1977},{911,1619},{185,1527},{16,1955},{23,1952},{19,1992},{737,1725},{34,1955},{61,542},{19,1988},{17,1954},{3,1990},{2,1957},{3,1979},{37,1973},{14,1952},{43,1991},{31,1996},{13,1963},{33,1956},{26,1984},{16,1991},{13,1967},{34,1975},{10,1985},{6,1957},{125,841},{851,1718},{1,1998},{35,1976},{1034,1207},{1,1968},{40,1951},{16,1984},{10,1953},{722,1494},{48,1961},{24,1977},{42,1961},{11,1967},{5,1982},{49,1955},{49,1953},{28,1951},{13,1973},{30,1985},{27,1987},{635,1278},{27,1961},{0,1970},{30,1977},{8,1992},{448,1630},{984,1403},{672,849},{28,1982},{44,1966},{2,1970},{16,1987},{11,1962},{44,1974},{28,1959},{17,1973},{15,1957},{35,1988},{8,1958},{32,1992},{24,1960},{6,1983},{24,1966},{1172,1649},{47,1968},{19,1963},{10,1975},{24,1987},{42,1998},{6,1972},{2,1981},{8,1999},{10,1995},{15,1993},{37,1984},{1,1996},{39,1970},{1225,1727},{8,1965},{334,1525},{40,1986},{38,1975},{16,1978},{15,1964},{34,1984},{1,1994},{24,1996},{44,1964},{1042,1536},{35,1997},{49,1978},{24,1998},{36,1968},{25,1958},{682,1596},{46,1992},{12,1966},{19,1997},{1467,1769},{4,1999},{29,1975},{26,1991},{16,1981},{49,1959},{332,997},{44,1983},{12,1997},{23,1999},{27,1993},{45,1952},{1647,1868},{40,1963},{10,1968},{32,1990},{43,1954},{48,1982},{22,1951},{16,1979},{888,1305},{28,1990},{47,1963},{3,1971},{2,1979},{32,1988},{48,1969},{38,1965},{30,1986},{33,1993},{2,1964},{48,1973},{162,1801},{3,1954},{14,1999},{18,1985},{343,1731},{21,1961},{10,1989},{44,1980},{4,1953},{4,1982},{41,1959},{19,1966},{536,1877},{107,1992},{6,1963},{30,1996},{44,1960},{16,1985},{36,1956},{277,574},{13,1985},{35,1963},{4,1961},{23,1975},{46,1998},{32,1970},{47,1972},{48,1994},{43,1997},{1391,1726},{1180,1816},{43,1999},{36,1965},{34,1958},{28,1971},{40,1989},{15,1952},{10,1971},{47,1981},{11,1972},{13,1964},{1708,1768},{48,1981},{14,1973},{20,1960},{37,1971},{573,682},{1446,1850},{9,1950},{27,1951},{1304,1422},{43,1956},{18,1969},{9,1971},{45,1993},{672,941},{38,1970},{44,1998},{49,1984},{27,1981},{45,1969},{44,1982},{14,1989},{1427,1773},{341,1306},{31,1950},{120,826},{25,1980},{22,1964},{1321,1789},{37,1999},{42,1977},{704,1857},{29,1952},{38,1990},{21,1988},{523,1174},{19,1968},{3,1980},{901,955},{3,1982},{818,1822},{1030,1064},{20,1983},{34,1950},{1336,1950},{4,1998},{40,1953},{8,1951},{309,1472},{17,1972},{180,1993},{30,1994},{40,1966},{43,1979},{45,1960},{18,1974},{799,1586},{33,1975},{32,1957},{1280,1407},{17,1999},{19,1954},{39,1998},{42,1953},{31,1988},{15,1988},{30,1980},{39,1992},{280,1904},{48,1953},{24,1990},{197,903},{20,1964},{45,1987},{12,1956},{40,1968},{18,1950},{25,1999},{38,1989},{33,1976},{1,1985},{522,1756},{16,1980},{28,1962},{14,1980},{0,1961},{4,1956},{28,1988},{983,1761},{22,1987},{29,1988},{27,1950},{0,1991},{27,1983},{36,1997},{9,1985},{30,1950},{558,1932},{375,1244},{44,1479},{44,1965},{1,1989},{12,1959},{46,1980},{8,1973},{22,1980},{17,1952},{53,161},{23,1986},{49,1969},{1,1987},{43,1985},{3,1959},{853,985},{21,1977},{39,1990},{30,1990},{6,1964},{36,1986},{30,1984},{17,1961},{24,1933},{37,1987},{236,1284},{17,1959},{38,1999},{15,1959},{1264,1894},{426,1761},{29,1955},{44,1991},{1036,1676},{8,1952},{21,1996},{12,1979},{35,1971},{35,1984},{16,1986},{11,1956},{35,1950},{20,1982},{4,1821},{46,1985},{18,1965},{42,1956},{49,1962},{34,1992},{0,1951},{2,1982},{703,1891},{46,1979},{11,1953},{96,468},{1344,1603},{11,1964},{46,1978},{3,1963},{6,1987},{20,1989},{25,1963},{591,1034},{47,1978},{42,1995},{7,1995},{14,1982},{5,1974},{16,1994},{36,1954},{23,1970},{766,1787},{4,1969},{14,1994},{44,1992},{48,1979},{43,1998},{37,1962},{29,1999},{23,1981},{8,1966},{33,1963},{11,1994},{10,1972},{26,1982},{37,1961},{35,1966},{28,1958},{718,868},{49,990},{28,1986},{28,1972},{19,1952},{23,1976},{31,1965},{25,1982},{9,1992},{18,1979},{18,1987},{38,1984},{360,606},{25,1989},{29,1978},{32,1995},{748,1041},{20,1984},{19,1994},{44,1962},{39,1976},{769,1039},{25,1976},{36,1972},{101,712},{8,1988},{49,1951},{22,1950},{738,768},{22,1996},{116,567},{15,1985},{10,1983},{16,1950},{46,1951},{26,1957},{149,1092},{36,1958},{6,1966},{5,1980},{49,1966},{30,1982},{24,1991},{11,1954},{26,1990},{1361,1882},{335,1286},{47,1995},{1164,1707},{31,1964},{31,1995},{7,1969},{5,1990},{7,1999},{34,1985},{34,1988},{49,1960},{47,1961},{18,1959},{35,1951},{6,1979},{7,1965},{15,1969},{13,1972},{774,1519},{39,1977},{31,1983},{750,1308},{46,1969},{46,1970},{58,1796},{15,1974},{41,1969},{16,1988},{42,1969},{25,1953},{8,1956},{639,1148},{37,1993},{482,1702},{1,1963},{3,734},{25,1972},{1220,1405},{32,1985},{32,1987},{22,1979},{1123,1443},{47,1988},{19,1978},{18,1984},{36,1987},{34,1956},{40,1988},{22,1958},{29,1972},{1168,1505},{1,1966},{159,1938},{23,1969},{75,893},{17,1955},{24,1970},{14,1969},{42,1958},{710,1056},{40,1987},{6,1960},{17,1977},{17,1976},{3,1967},{42,1966},{372,1738},{467,1289},{7,1990},{605,1087},{14,1968},{46,1982},{7,1980},{32,1951},{14,1962},{292,510},{24,1984},{620,1434},{426,1082},{926,1738},{314,731},{1,1950},{37,1980},{45,1973},{17,1967},{11,1969},{23,1977},{23,1974},{79,538},{483,1523},{8,1989},{1137,1181},{46,1959},{24,1953},{29,1973},{11,1998},{21,1974},{43,1966},{39,1972},{9,1953},{32,1966},{45,1953},{49,1981},{27,1977},{15,1971},{47,1980},{31,1992},{3,1978},{19,1961},{5,1951},{1010,1979},{4,1954},{53,1795},{0,1987},{24,1976},{7,1971},{44,1961},{205,1037},{8,1975},{4,1993},{291,1248},{15,1961},{108,527},{31,1973},{44,1995},{11,1957},{22,1984},{40,1975},{12,1985},{20,1962},{47,1989},{31,1976},{0,1972},{29,1982},{1587,1689},{1,1980},{19,1982},{40,1991},{38,1960},{14,1981},{42,1990},{26,1969},{30,1955},{241,1679},{1,1961},{24,1958},{41,1965},{26,1989},{34,1987},{5,277},{48,1965},{27,1975},{45,1995},{42,1979},{1206,1539},{12,1983},{467,1614},{4,1986},{19,1967},{37,1966},{11,1983},{21,1985},{1108,1465},{437,1240},{34,1965},{15,1999},{48,1957},{2,1967},{16,1963},{30,1974},{34,1960},{545,1485},{5,1972},{496,1108},{45,1990},{10,1981},{24,1957},{5,1996},{7,1994},{8,1972},{41,1227},{36,1955},{1107,1682},{346,486},{12,1974},{1080,1655},{35,1967},{8,1969},{31,1989},{9,1973},{48,1959},{42,1971},{43,1953},{2,1975},{27,1978},{41,1996},{467,553},{7,1970},{53,1791},{37,1968},{17,1971},{41,1966},{20,1990},{5,1969},{5,1981},{428,1311},{7,1988},{499,1520},{9,1974},{39,1973},{2,1969},{45,1962},{37,1994},{6,1999},{45,1965},{16,1993},{4,1951},{2,1983},{23,1989},{49,1986},{77,555},{9,1994},{27,1972},{19,1989},{9,1969},{397,962},{49,1975},{10,1962},{5,1977},{0,1969},{11,1970},{27,1976},{646,947},{31,1962},{14,1993},{962,1054},{15,1983},{24,1956},{28,1991},{25,1961},{2,1999},{27,1963},{12,1996},{20,1974},{2,1988},{13,1999},{28,1967},{1674,1771},{19,1969},{35,1959},{1235,1298},{1586,1764},{49,1965},{49,1988},{27,1988},{39,1985},{21,1956},{382,1116},{20,1966},{632,1058},{41,1951},{45,1994},{14,1961},{4,1972},{29,1981},{22,1962},{49,1989},{40,1972},{47,1979},{9,1991},{24,1954},{534,560},{26,1995},{2,1991},{45,1986},{33,1965},{483,1860},{38,1993},{9,969},{47,1958},{18,1962},{37,1978},{1332,1375},{16,1957},{19,1962},{11,1968},{21,1965},{8,1990},{381,1387},{28,1672},{37,1986},{7,1987},{14,1964},{49,1970},{5,1966},{1008,1182},{1617,1688},{44,1967},{255,1903},{25,1983},{16,1997},{24,1983},{40,1978},{515,1037},{4,1983},{49,1995},{33,1979},{1,1953},{22,1983},{24,1994},{8,1979},{3,1957},{639,1289},{31,1970},{25,1990},{4,1976},{0,1976},{22,1969},{49,1977},{23,1985},{241,890},{6,1962},{20,1995},{13,1965},{45,1996},{49,1972},{354,826},{41,1980},{32,1965},{171,1715},{6,1975},{28,1963},{13,1960},{18,1958},{33,1960},{38,1982},{407,672},{38,1957},{18,1978},{11,1991},{21,1952},{37,1958},{3,1973},{45,1975},{19,1964},{43,1964},{6,1955},{45,1967},{32,1991},{19,1995},{41,1977},{1306,1950},{2,702},{5,1228},{10,1958},{15,1980},{13,1959},{16,1956},{21,1993},{12,1968},{23,1971},{22,648},{21,1997},{8,1964},{29,1970},{22,1991},{6,1959},{3,1997},{883,1466},{46,1955},{43,1962},{765,1524},{418,998},{27,1971},{42,1959},{11,1959},{31,1953},{11,1976},{881,937},{9,1996},{16,1982},{44,1968},{797,1961},{17,1986},{26,1967},{39,1955},{35,1993},{541,824},{43,1980},{14,1965},{1230,1583},{34,1981},{33,1996},{42,1968},{10,1986},{19,1990},{1172,1199},{42,1970},{44,1952},{3,1994},{28,1996},{757,1796},{33,1950},{14,1970},{36,445},{10,1997},{46,1953},{49,1967},{7,1954},{47,1970},{41,1998},{443,1205},{26,1979},{1000,1265},{846,1983},{38,1956},{4,1978},{421,1018},{10,1952},{20,1993},{25,1957},{2,1959},{3,1984},{36,1980},{1,1960},{25,1977},{461,1964},{46,1973},{40,1952},{0,1964},{41,1999},{36,1950},{10,1959},{2,1995},{51,111},{584,706},{945,1016},{24,1988},{914,1395},{0,1986},{3,1960},{30,1997},{448,616},{31,1981},{42,1978},{11,1989},{221,1769},{21,1994},{21,1959},{45,1977},{825,1529},{34,1994},{23,1960},{780,994},{15,1950},{156,1379},{21,1983},{191,512},{28,1960},{18,1970},{6,1965},{36,1961},{46,1960},{19,1998},{633,1334},{1405,1967},{15,1996},{29,1994},{4,1981},{26,1963},{39,1974},{664,1980},{14,1956},{556,1715},{573,620},{8,1959},{38,1955},{27,1953},{26,1980},{16,1983},{47,1973},{19,1960},{34,1986},{30,1959},{21,1962},{1739,1777},{413,1811},{17,1960},{200,562},{4,1964},{863,1793},{563,1032},{27,1996},{7,1956},{353,491},{6,1994},{14,1996},{35,1964},{1556,1670},{1,1991},{43,1975},{20,1950},{217,1256},{40,1962},{14,1958},{48,1974},{35,1955},{16,1975},{31,1960},{40,1969},{2,1978},{17,1983},{29,1989},{1,1959},{23,1957},{25,1954},{22,1952},{26,1985},{38,1961},{42,1972},{24,1961},{13,1983},{36,1991},{12,1986},{35,1994},{39,1967},{9,1954},{31,1954},{45,1963},{13,1982},{42,1954},{44,1978},{3,1952},{41,1993},{13,1980},{625,853},{44,1955},{0,1998},{45,1985},{45,1992},{32,1971},{42,1950},{11,1999},{12,1984},{29,1959},{11,1997},{7,1982},{25,1969},{29,1998},{423,1555},{16,1995},{49,1952},{15,1958},{25,1981},{16,1954},{37,1950},{12,1965},{24,1974},{16,1961},{17,1974},{216,1184},{42,1993},{804,1110},{19,1984},{33,1964},{12,1994},{133,1696},{29,1967},{17,1951},{1,1984},{141,1404},{44,1994},{16,1998},{18,1967},{18,1999},{26,1958},{46,1989},{514,639},{287,1700},{32,1968},{1114,1637},{34,1968},{13,1951},{1535,1569},{125,1931},{48,1991},{44,1958},{3,1953},{12,1990},{39,1995},{4,1966},{46,1965},{632,1982},{17,1964},{45,1979},{17,1966},{38,1995},{8,1986},{13,1970},{30,1978},{23,1968},{7,1993},{1396,1622},{14,1953},{20,1992},{1,1990},{23,1979},{1333,1676},{14,1978},{40,1955},{14,1991},{32,1958},{900,1219},{30,1975},{7,1973},{9,1988},{35,1985},{43,1957},{39,1950},{0,1968},{30,1952},{48,1971},{26,1955},{10,1982},{120,629},{30,1995},{38,1969},{974,1584},{0,1974},{21,1971},{19,1956},{263,1437},{0,1959},{1307,1743},{21,1968},{41,1989},{28,1997},{38,1951},{34,1979},{353,712},{36,1982},{39,1962},{31,1993},{9,1955},{1217,1260},{41,1950},{2,1998},{1156,1340},{31,1974},{41,1967},{10,1965},{29,1957},{33,1991},{45,1981},{24,1997},{1226,1415},{651,1695},{1736,1872},{2,1980},{3,1958},{658,914},{18,1951},{12,1998},{49,1961},{21,1992},{26,1970},{905,1240},{12,1967},{40,1993},{2,1993},{69,1077},{4,1997},{46,1986},{1139,1879},{646,1592},{704,1542},{48,1997},{41,1960},{37,1965},{26,1971},{28,1964},{1351,1797},{9,1963},{25,1966},{28,1953},{45,1974},{21,1966},{17,1957},{146,192},{49,1979},{0,1995},{23,1992},{19,1957},{45,1988},{32,1972},{28,1955},{43,1968},{397,897},{1436,1813},{22,1955},{4,1985},{1112,1247},{3,1965},{4,1968},{15,1960},{25,1965},{897,1130},{24,1950},{12,1980},{42,1962},{41,1986},{21,1973},{3,1995},{1243,1407},{27,1952},{130,1753},{28,1994},{21,1953},{2,1958},{8,1985},{256,357},{436,1351},{779,1360},{248,1380},{227,1141},{9,1964},{8,1995},{361,1525},{16,1999},{1,1965},{19,1979},{47,1997},{1,1978},{5,1968},{152,1833},{398,1597},{9,1982},{0,1950},{48,1955},{22,1971},{35,1995},{773,1212},{49,1999},{263,451},{28,1976},{640,894},{9,1952},{7,1976},{7,1972},{34,1999},{31,1998},{366,1226},{11,1958},{389,1359},{26,1960},{32,1986},{45,1983},{10,1988},{38,1986},{29,1954},{6,1978},{35,1974},{16,1977},{5,1991},{23,1987},{13,1997},{47,1957},{19,1953},{13,1956},{1729,1766},{466,1186},{17,1998},{11,1995},{26,1952},{9,1958},{47,1974},{39,1986},{1181,1266},{48,1047},{1213,1252},{1267,1483},{43,1988},{38,1978},{41,1964},{2,1990},{11,1974},{12,1972},{26,1978},{27,1965},{7,1964},{38,1998},{16,1959},{1,1969},{24,1982},{14,1955},{37,1952},{13,1992},{11,1966},{9,1961},{95,1318},{35,1992},{1263,1475},{25,1962},{19,1965},{10,1991},{672,774},{14,1984},{49,1957},{41,1962},{42,1955},{8,1997},{48,1952},{18,1981},{27,975},{22,1965},{80,1672},{10,1987},{43,1961},{17,1980},{9,1998},{41,1987},{48,1985},{32,1701},{10,1957},{26,1968},{306,398},{42,1963},{44,1987},{40,1983},{1,1993},{39,1984},{45,1954},{48,1968},{3,1966},{1314,1928},{719,1033},{17,1958},{34,1980},{958,1893},{32,1984},{32,1998},{33,1953},{38,1985},{25,1978},{2,1973},{30,1969},{20,1957},{1166,1952},{23,1965},{10,1964},{25,1984},{37,1998},{1037,1104},{49,1993},{37,1992},{1,1976},{10,1973},{4,1988},{33,1951},{22,1974},{32,1975},{8,195},{552,1375},{24,1973},{28,1984},{23,1962},{46,1981},{33,1969},{36,1988},{33,1974},{48,1970},{27,1968},{773,1719},{33,1978},{26,1950},{4,1962},{26,1977},{41,1988},{41,1957},{5,1962},{99,251},{35,1983},{483,1000},{11,1950},{11,1977},{1,1962},{8,1968},{733,1437},{47,1977},{36,1951},{45,1955},{3,1976},{5,1963},{47,1999},{32,1977},{41,1958},{20,1996},{23,1967},{21,1979},{14,1960},{20,1987},{28,1970},{27,1985},{15,1990},{366,1496},{19,1971},{37,1977},{34,1967},{30,1964},{34,1963},{461,932},{46,1987},{34,1990},{6,1986},{22,1992},{10,1960},{10,1970},{6,1996},{43,1959},{41,1970},{25,1986},{32,1955},{22,1975},{23,1993},{18,1997},{28,1983},{47,1962},{970,1915},{781,1131},{35,1977},{691,1306},{44,1989},{36,1971},{7,1979},{29,1971},{48,1998},{30,1999},{1150,1697},{5,1987},{39,1954},{23,1964},{1189,1801},{43,1992},{21,1975},{15,1965},{43,1967},{983,1687},{22,1961},{7,1974},{9,1967},{613,1253},{7,1959},{45,1980},{36,1962},{124,1126},{32,1961},{6,1970},{40,1970},{39,1969},{148,1880},{24,1971},{11,1984},{14,1976},{1167,1448},{13,1987},{39,1961},{21,1978},{26,1953},{38,1962},{35,1969},{19,1972},{43,1973},{9,1983},{6,1981},{1013,1794},{277,700},{49,1950},{889,1187},{28,1975},{2,1992},{43,1993},{37,1956},{608,1497},{16,1960},{0,1958},{19,1996},{33,1994},{48,1995},{2,1977},{4,1991},{22,1959},{9,1951},{17,1997},{13,1991},{42,1992},{44,1953},{18,1986},{0,1965},{44,1969},{626,1781},{28,1969},{11,1993},{40,1950},{5,1973},{34,1962},{13,1994},{532,587},{45,1959},{47,1976},{11,1951},{47,1998},{686,1977},{109,1276},{25,1955},{35,1956},{20,1967},{510,1348},{27,1969},{25,1951},{20,1908},{8,1955},{18,1972},{653,704},{15,1966},{4,1994},{0,1980},{26,1965},{33,1959},{37,1990},{47,1950},{1,1992},{8,1998},{20,1954},{42,1975},{1721,1844},{34,1997},{1,1983},{32,1973},{26,1956},{15,1956},{906,1191},{32,1954},{2,1965},{43,1983},{132,1903},{13,1955},{25,1968},{594,1954},{28,1954},{26,1988},{528,1744},{20,1991},{18,1977},{283,1341},{20,1973},{47,1964},{46,1963},{42,1991},{1069,1800},{34,1974},{33,1997},{4,1984},{0,1989},{34,1953},{33,1982},{643,1758},{34,1989},{41,1976},{13,1957},{22,1995},{22,1966},{571,708},{34,1952},{18,1993},{38,1992},{31,1985},{1346,1749},{683,1235},{38,1952},{7,1975},{20,1986},{32,1952},{31,1955},{4,1975},{44,1977},{26,1975},{1218,1406},{795,1666},{5,1952},{41,1991},{9,1968},{354,737},{22,1967},{1014,1208},{12,1955},{45,1958},{5,1964},{0,1967},{27,1991},{32,1999},{1625,1959},{115,1464},{45,1966},{803,1676},{0,1955},{3,1964},{15,1987},{12,1969},{15,1962},{34,1954},{2,1976},{24,1975},{34,1978},{8,1993},{18,1982},{514,1440},{41,1983},{908,1913},{41,1972},{9,1970},{27,1974},{34,1973},{36,1973},{17,1953},{624,1560},{100,1731},{17,1990},{47,1986},{32,1950},{25,1974},{1,1977},{36,1994},{39,1975},{18,1953},{220,1835},{1,1972},{4,1980},{40,1990},{516,1589},{41,1975},{909,1114},{47,1965},{37,1960},{2,1953},{28,1992},{29,1964},{5,1959},{1,1999},{28,1985},{166,301},{29,1966},{469,1382},{966,1422},{33,1957},{13,1958},{46,1984},{20,1958},{25,1959}};
        s = "||*|||||*|*|*||||*||||*||||||*|||||*|||||||*||||||*||||||*|||**||**||*|*||||*||**||**|*||*||||||||||*||*|*|*|||*||*||***|*****||*|**||||*||**||***||**||||||***||||||**|||||**|||**|||*||*||*||**|**|*|||||***|||*|||*||*||||||||*||*||||||*|||*||||*||||*|||****|||||*||*||*|||||||****||||*|*|||||||*||******|||||||||||*||*|*|*||||*|||*|**|||||||*|*||**||*|*||||||***|*||*||**||||*|||*||||*|*||||*||||*|||*|****||||||*||||**||*|*||||||*|||*||||*|||||***||*|**|*|***|*||*||*||||*|||*|||||||*|||||||*|*|***||**|***||*|||**|****|***||*|*|||||||||||*||||*|**||||*|*|||||**|*||**|||***|*****||||*|**|||||||**|||**||||||||*||*|||||||||||**||*|*||*|*|||**|||||||*||**||*||**|||*|*|||||*|||**|*|**|||||||||||***||**|||**||*|||||*||*|||||*|||||*||||*|||*|*|||*|**|*|**||||*||||||||||*||*||*||||||*|**|**|*||||*|*|**|*|**|*|**|||*||||||*|||*|||||**|||||**|||***|||***||||||*|||||||*|||**||*|*||*|*||**||||||||||**|||||*****||||||**||*|*||||||*|||***||***||*||||**|*||*|**||**||**||*||**|**|***||||*||||*|*|*||||**|**|*||||||||||*|**|*|*|*|*||||||*||||**|||||*||*||||*|*||*|||*|*|||||**|**||||*|**|*||**||***||*||*|||***|||||*|||||**|*|*|||||||||**||||||||*||||||*|||**||*|**||*|||||*||||||*|*||||***||||||||||*||**|*||*|*|*||*|*||||||*|||*|||||*||**||*||***||||*||*|*||||*||||*||||**|**|*|**|**||||||||*||||||*||||*||||||||||**|*|**|*|**||||*||*||||**|**|*|*|||**|||||||*|||||*||||*|**||*|**||*||*||||**||*|*|*|*|*|*|**||*||||**||*||*|*|||*|*|*|*|*||||||**||*|||***||||**|||||***|||*||*|||||||||*||*|||||||**|*||***|*||*|*||*|**|*|**||*|*||*|||||*|*|*||||**|*||*||*|*|*|*||**||||||||*|**|*|*|||*||*||||*||||**||||*|||||***||**|*||||***|***||||||||||**||*|**|||*||*|||*|*||||*||*|*||||***|||*|****|*|||*||*|||*|*|*|||*|*|||*||*||*|*|***|||***||**|||||||*|||||*|*|||||*||||||*||*||*|||||||**||||||||||****|||||***||***||***||*****||***||||||**||**|*|*|**||||||*||***||||||||*||||||*||||||*|||||||**|||||*|||||||*|*||||||****|**|***|*||*|||||**|**||*|||||*||||||||*|*|||*||**|||||*||*|||*|*|*||||||*|**|||||||||*||||||";
        System.out.println("输入：" + s );
        System.out.println("预期结果：[652,650,656,657,88,654,659,651,663,657,653,646,655,656,650,658,656,407,65,660,647,210,661,650,652,268,659,664,657,657,225,660,50,655,22,653,656,649,208,653,652,157,659,396,651,660,653,659,660,179,655,653,656,655,665,651,656,660,664,658,657,657,645,372,653,661,648,660,657,653,77,656,652,654,658,655,650,657,613,502,655,659,660,412,656,653,373,662,659,651,658,662,650,658,656,656,656,67,45,663,659,227,661,660,402,654,655,425,380,375,645,658,656,657,663,658,661,659,182,662,651,226,652,660,656,656,658,230,655,649,651,655,65,662,657,381,596,662,658,82,655,662,138,653,653,653,655,660,656,656,665,86,659,87,665,84,652,658,659,259,655,651,653,654,650,657,657,49,656,68,146,657,649,658,659,652,660,647,267,660,656,185,657,653,657,657,659,653,649,368,656,651,650,650,658,659,659,650,646,659,665,655,661,649,654,208,421,654,648,660,664,86,657,649,657,653,290,537,656,655,656,659,665,193,657,649,657,660,658,417,654,650,661,20,657,654,658,664,666,660,14,660,657,654,28,654,655,664,656,452,659,653,657,36,65...");
        System.out.println("实际结果：" + Arrays.toString(platesBetweenCandles(s,
                queries)));
    }

    @Test
    public void test1() {
//        int[] a = {0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20};
        int[] a = {0, 1, 1, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 12};

        System.out.println(getLeft(a, 2, 32, 2));
        System.out.println(getRight(a, 2, 32));


    }
    @Test
    public void test2(){
        String s =
                "||*|||||*|*|*||||*||||*||||||*|||||*|||||||*||||||*||||||*|||**||**||*|*||||*||**||**|*||*||||||||||*||*|*|*|||*||*||***|*****||*|**||||*||**||***||**||||||***||||||**|||||**|||**|||*||*||*||**|**|*|||||***|||*|||*||*||||||||*||*||||||*|||*||||*||||*|||****|||||*||*||*|||||||****||||*|*|||||||*||******|||||||||||*||*|*|*||||*|||*|**|||||||*|*||**||*|*||||||***|*||*||**||||*|||*||||*|*||||*||||*|||*|****||||||*||||**||*|*||||||*|||*||||*|||||***||*|**|*|***|*||*||*||||*|||*|||||||*|||||||*|*|***||**|***||*|||**|****|***||*|*|||||||||||*||||*|**||||*|*|||||**|*||**|||***|*****||||*|**|||||||**|||**||||||||*||*|||||||||||**||*|*||*|*|||**|||||||*||**||*||**|||*|*|||||*|||**|*|**|||||||||||***||**|||**||*|||||*||*|||||*|||||*||||*|||*|*|||*|**|*|**||||*||||||||||*||*||*||||||*|**|**|*||||*|*|**|*|**|*|**|||*||||||*|||*|||||**|||||**|||***|||***||||||*|||||||*|||**||*|*||*|*||**||||||||||**|||||*****||||||**||*|*||||||*|||***||***||*||||**|*||*|**||**||**||*||**|**|***||||*||||*|*|*||||**|**|*||||||||||*|**|*|*|*|*||||||*||||**|||||*||*||||*|*||*|||*|*|||||**|**||||*|**|*||**||***||*||*|||***|||||*|||||**|*|*|||||||||**||||||||*||||||*|||**||*|**||*|||||*||||||*|*||||***||||||||||*||**|*||*|*|*||*|*||||||*|||*|||||*||**||*||***||||*||*|*||||*||||*||||**|**|*|**|**||||||||*||||||*||||*||||||||||**|*|**|*|**||||*||*||||**|**|*|*|||**|||||||*|||||*||||*|**||*|**||*||*||||**||*|*|*|*|*|*|**||*||||**||*||*|*|||*|*|*|*|*||||||**||*|||***||||**|||||***|||*||*|||||||||*||*|||||||**|*||***|*||*|*||*|**|*|**||*|*||*|||||*|*|*||||**|*||*||*|*|*|*||**||||||||*|**|*|*|||*||*||||*||||**||||*|||||***||**|*||||***|***||||||||||**||*|**|||*||*|||*|*||||*||*|*||||***|||*|****|*|||*||*|||*|*|*|||*|*|||*||*||*|*|***|||***||**|||||||*|||||*|*|||||*||||||*||*||*|||||||**||||||||||****|||||***||***||***||*****||***||||||**||**|*|*|**||||||*||***||||||||*||||||*||||||*|||||||**|||||*|||||||*|*||||||****|**|***|*||*|||||**|**||*|||||*||||||||*|*|||*||**|||||*||*|||*|*|*||||||*|**|||||||||*||||||";
        int[][] queries = {{0,1983}};

        System.out.println("输入：" + s );
        System.out.println("预期结果：663");
        System.out.println("实际结果：" + Arrays.toString(platesBetweenCandles(s,
                queries)));

    }

    @Test
    public void test3(){
        String s =
                "||*|||||*|*|*||||*||||*||||||*|||||*|||||||*||||||*||||||*|||**||**||*|*||||*||**||**|*||*||||||||||*||*|*|*|||*||*||***|*****||*|**||||*||**||***||**||||||***||||||**|||||**|||**|||*||*||*||**|**|*|||||***|||*|||*||*||||||||*||*||||||*|||*||||*||||*|||****|||||*||*||*|||||||****||||*|*|||||||*||******|||||||||||*||*|*|*||||*|||*|**|||||||*|*||**||*|*||||||***|*||*||**||||*|||*||||*|*||||*||||*|||*|****||||||*||||**||*|*||||||*|||*||||*|||||***||*|**|*|***|*||*||*||||*|||*|||||||*|||||||*|*|***||**|***||*|||**|****|***||*|*|||||||||||*||||*|**||||*|*|||||**|*||**|||***|*****||||*|**|||||||**|||**||||||||*||*|||||||||||**||*|*||*|*|||**|||||||*||**||*||**|||*|*|||||*|||**|*|**|||||||||||***||**|||**||*|||||*||*|||||*|||||*||||*|||*|*|||*|**|*|**||||*||||||||||*||*||*||||||*|**|**|*||||*|*|**|*|**|*|**|||*||||||*|||*|||||**|||||**|||***|||***||||||*|||||||*|||**||*|*||*|*||**||||||||||**|||||*****||||||**||*|*||||||*|||***||***||*||||**|*||*|**||**||**||*||**|**|***||||*||||*|*|*||||**|**|*||||||||||*|**|*|*|*|*||||||*||||**|||||*||*||||*|*||*|||*|*|||||**|**||||*|**|*||**||***||*||*|||***|||||*|||||**|*|*|||||||||**||||||||*||||||*|||**||*|**||*|||||*||||||*|*||||***||||||||||*||**|*||*|*|*||*|*||||||*|||*|||||*||**||*||***||||*||*|*||||*||||*||||**|**|*|**|**||||||||*||||||*||||*||||||||||**|*|**|*|**||||*||*||||**|**|*|*|||**|||||||*|||||*||||*|**||*|**||*||*||||**||*|*|*|*|*|*|**||*||||**||*||*|*|||*|*|*|*|*||||||**||*|||***||||**|||||***|||*||*|||||||||*||*|||||||**|*||***|*||*|*||*|**|*|**||*|*||*|||||*|*|*||||**|*||*||*|*|*|*||**||||||||*|**|*|*|||*||*||||*||||**||||*|||||***||**|*||||***|***||||||||||**||*|**|||*||*|||*|*||||*||*|*||||***|||*|****|*|||*||*|||*|*|*|||*|*|||*||*||*|*|***|||***||**|||||||*|||||*|*|||||*||||||*||*||*|||||||**||||||||||****|||||***||***||***||*****||***||||||**||**|*|*|**||||||*||***||||||||*||||||*||||||*|||||||**|||||*|||||||*|*||||||****|**|***|*||*|||||**|**||*|||||*||||||||*|*|||*||**|||||*||*|||*|*|*||||||*|**|||||||||*||||||";
        int[][] queries = {{0,1983}};

        System.out.println("输入：" + s );
        System.out.println("预期结果：663");
        System.out.println("实际结果：" + Arrays.toString(platesBetweenCandles(s,
                queries)));

    }

    public int[] platesBetweenCandles(String s, int[][] queries) {
        int n = s.length();
        int[] preSum = new int[n];
        for (int i = 0, sum = 0; i < n; i++) {
            if (s.charAt(i) == '*') {
                sum++;
            }
            preSum[i] = sum;
        }
        int[] left = new int[n];
        for (int i = 0, l = -1; i < n; i++) {
            if (s.charAt(i) == '|') {
                l = i;
            }
            left[i] = l;
        }
        int[] right = new int[n];
        for (int i = n - 1, r = -1; i >= 0; i--) {
            if (s.charAt(i) == '|') {
                r = i;
            }
            right[i] = r;
        }
        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            int x = right[query[0]], y = left[query[1]];
            ans[i] = x == -1 || y == -1 || x >= y ? 0 : preSum[y] - preSum[x];
        }
        return ans;
    }

    //通过，均耗时100ms
    public int[] platesBetweenCandles4(String s, int[][] queries) {
        int[] result = new int[queries.length];
        if (s.length() <= 2) {
            return result;
        }
        int[] sumArr = new int[s.length() + 1];
        int sum = 0;
        // * 盘子的统计 每个坐标前有多少个盘子
        for (int i = 0; i < s.length(); i++) {
            sumArr[i] = sum;
            if ('*' == s.charAt(i)) {
                sum++;
            }
        }
        sumArr[s.length()] = sum;
//        for (int i = 0; i < sumArr.length; i++) {
//            System.out.print("(" + i + " " + sumArr[i] + ")");
//        }
//        System.out.println();
//        System.out.println(Arrays.toString(sumArr));

        int lefti;
        int righti;
        //确认左右蜡烛起始点
        for (int i = 0; i < queries.length; i++) {
            // queries[i][0] 开始
            // queries[i][1] 结束
            int start = queries[i][0];
            int end = queries[i][1];

            //没有蜡烛空位
            System.out.println("目标差值为：" + (sumArr[end] - sumArr[start]) + ",坐标差值为：" + (end - start));
            if (sumArr[end] - sumArr[start] + 1 > end - start) {
                continue;
            }
            lefti = getLeft(sumArr, start, end, start);
            righti = getRight(sumArr, start, end);

            System.out.println(String.format("目标：%s,%s 获取到蜡烛坐标：[%s,%s]", start, end, lefti, righti));

            if (lefti >= righti) {
                continue;
            }
            //盘子统计
            result[i] = sumArr[righti] - sumArr[lefti];
        }

        return result;
    }

    //取左
    private int getLeft(int[] sumArr, int start, int end, int allStart) {
        //存在蜡烛
        if (end - start == 1 && sumArr[end] == sumArr[start]) {
            return start;
        }
        //极值判断
        if (start > 0 && sumArr[start] == sumArr[start - 1] && start != allStart) {
            return start - 1;
        }
        int mid = (end + start) / 2;
        int result = -1;
        //上半区寻找
        if (sumArr[mid] - sumArr[start] < mid - start && start != mid) {
            result = getLeft(sumArr, start, mid, allStart);
        }

        //下半区寻找
        if (result == -1 && sumArr[end] - sumArr[mid] < end - mid && start != mid) {
            result = getLeft(sumArr, mid, end, allStart);

        }
        return result;
    }

    //取右
    private int getRight(int[] sumArr, int start, int end) {

        //存在蜡烛
        if (end - start == 1 && sumArr[end] == sumArr[start]) {
            return start;
        }
        //极值判断
        if (sumArr[end] == sumArr[end + 1]) {
            return end;
        }


        int mid = (end + start) / 2;
        int result = 0;
        //下半区寻找
        if (sumArr[end] - sumArr[mid] < end - mid && start != mid) {
            result = getRight(sumArr, mid, end);

        }
        //上半区寻找
        if (result == 0 && sumArr[mid] - sumArr[start] < mid - start && start != mid) {
            result = getRight(sumArr, start, mid);
        }
        return result;
    }


    //21 超时
    public int[] platesBetweenCandles3(String s, int[][] queries) {
        int[] result = new int[queries.length];

        int[] sumArr = new int[s.length()];
        int sum = 0;
        // * 盘子的统计 每个坐标前有多少个盘子
        for (int i = 0; i < s.length(); i++) {
            sumArr[i] = sum;
            if ('*' == s.charAt(i)) {
                sum++;
            }
        }
        System.out.println(Arrays.toString(sumArr));

        int lefti;
        int righti;
        //确认左右蜡烛起始点
        for (int i = 0; i < queries.length; i++) {
            // queries[i][0] 开始
            // queries[i][1] 结束

            //没有蜡烛空位
            System.out.println("目标差值为：" + (sumArr[queries[i][1]] - sumArr[queries[i][0]]) + ",坐标差值为：" + (queries[i][1] - queries[i][0]));
            if (sumArr[queries[i][1]] - sumArr[queries[i][0]] + 1 > queries[i][1] - queries[i][0]) {
                continue;
            }

            lefti = -1;
            righti = -1;
            for (int j = queries[i][0], rj = queries[i][1]; j <= queries[i][1]; j++, rj--) {
                //确认左蜡烛
                if (lefti < 0 && '|' == s.charAt(j)) {
                    lefti = j;
                }
                //确认右蜡烛
                if (righti < 0 && '|' == s.charAt(rj)) {
                    righti = rj;
                }
                if (lefti > 0 && righti > 0) {
                    break;
                }
            }
            if (lefti >= righti) {
                continue;
            }
            //盘子统计
            result[i] = sumArr[righti] - sumArr[lefti];
        }

        return result;
    }

    //用例21超时
    public int[] platesBetweenCandles2(String s, int[][] queries) {
        int[] result = new int[queries.length];

        int[] sumArr = new int[s.length()];
        int sum = 0;
        // * 盘子的统计 每个坐标前有多少个盘子
        for (int i = 0; i < s.length(); i++) {
            sumArr[i] = sum;
            if ('*' == s.charAt(i)) {
                sum++;
            }
        }

        int lefti;
        int righti;
        //确认左右蜡烛起始点
        for (int i = 0; i < queries.length; i++) {
            // queries[i][0] 开始
            // queries[i][1] 结束
            lefti = -1;
            righti = -1;
            for (int j = queries[i][0], rj = queries[i][1]; j <= queries[i][1]; j++, rj--) {
                //确认左蜡烛
                if (lefti < 0 && '|' == s.charAt(j)) {
                    lefti = j;
                }
                //确认右蜡烛
                if (righti < 0 && '|' == s.charAt(rj)) {
                    righti = rj;
                }
                if (lefti > 0 && righti > 0) {
                    break;
                }
            }
            if (lefti >= righti) {
                continue;
            }
            //盘子统计
            result[i] = sumArr[righti] - sumArr[lefti];
        }

        return result;
    }

    //用例12超时
    public int[] platesBetweenCandles1(String s, int[][] queries) {
        //转化为盘子过滤器
        boolean[] plate = new boolean[s.length()];
        for (int i = 0; i < s.length(); i++) {
            plate[i] = '*' == s.charAt(i);
        }

        int[] result = new int[queries.length];
        int lefti;
        int righti;
        //确认左右蜡烛起始点
        for (int i = 0; i < queries.length; i++) {
            // queries[i][0] 开始
            // queries[i][1] 结束

            lefti = -1;
            righti = -1;
            for (int j = queries[i][0], rj = queries[i][1]; j <= queries[i][1]; j++, rj--) {
                //确认左蜡烛
                if (lefti < 0 && !plate[j]) {
                    lefti = j;
                }
                //确认右蜡烛
                if (righti < 0 && !plate[rj]) {
                    righti = rj;
                }
                if (lefti > 0 && righti > 0) {
                    break;
                }
            }
            if (lefti >= righti) {
                continue;
            }
            //盘子统计
            for (int j = lefti; j <= righti; j++) {
                if (plate[j]) {
                    result[i]++;
                }
            }
        }

        return result;
    }


}
